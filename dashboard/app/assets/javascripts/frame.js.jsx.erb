// New private scope
(function() {
  var cs = React.addons.classSet;

  var TEMP_UPDATE = function() {
    // TODO: Investigate why this is sometimes called before the component has mounted.
    if (this._lifeCycleState == "UNMOUNTED")
      return;

    this.setState({
      updated: Math.random()
    });
  };

  // TODO:
  dashboard.i18n = {
    trophies: "<%= I18n.t(:trophies) %>",
    less: "<%= I18n.t(:less) %>",
    more: "<%= I18n.t(:more) %>",
    slow_loading: "<%= I18n.t(:slow_loading) %>",
    try_reloading: "<%= I18n.t(:try_reloading) %>",
    lesson_plan: "<%= I18n.t(:lesson_plan) %>",
    pdf_download: "<%= I18n.t(:pdf_download) %>",
    video_coming_soon: "<%= I18n.t('video_coming_soon') %>",
    download_coming_soon: "<%= I18n.t('download_coming_soon') %>",
    view_lesson_plan: "<%= I18n.t("view_lesson_plan") %>",
    next_stage: "<%= I18n.t(:next_stage) %>",
    nav: {
      popup: {
        mastery: "<%= I18n.t("nav.popup.mastery") %>",
        progress: "<%= I18n.t("nav.popup.progress") %>",
        close: "<%= I18n.t("nav.popup.close") %>"
      },
      user: {
        classroom: "<%= I18n.t("nav.user.classroom") %>",
        stats: "<%= I18n.t("nav.user.stats") %>",
        settings: "<%= I18n.t("nav.user.settings") %>",
        prizes: "<%= I18n.t("nav.user.prizes") %>",
        logout: "<%= I18n.t("nav.user.logout") %>",
        signin: "<%= I18n.t("nav.user.signin") %>",
        label: "<%= I18n.t('nav.user.label', username: '***') %>"
      }
    },
    progress: {
      not_started: "<%= I18n.t("progress.not_started") %>",
      in_progress: "<%= I18n.t("progress.in_progress") %>",
      completed_too_many_blocks: "<%= I18n.t("progress.completed_too_many_blocks") %>",
      completed_perfect: "<%= I18n.t("progress.completed_perfect") %>",
      assessment: "<%= I18n.t("progress.assessment") %>"
    },
    reference_area: {
      teacher: "<%= I18n.t("reference_area.teacher") %>",
      subtitle: "<%= I18n.t("reference_area.subtitle") %>"
    },
    video: {
      download: "<%= I18n.t('video.download') %>"
    }
  };

  // This is a wrapper to create a NEW component that watches some Stores and renders a component
  // using the values from those stores as properties.
  // TODO: formalize its location/usage
  Watching = function(component, stores) {
    return component.Watching = React.createClass({
      componentDidMount: function() {
        var changed = TEMP_UPDATE.bind(this);

        for (var key in stores) {
          var store = (stores[key] || this.props[key + "Store"]);
          if (!store || !store.subscribe) {
            delete stores[key];
            continue;
          }

          stores[key] = store;
          store.subscribe( changed );
        }
      },

      componentDidUnmount: function() {
        for (var key in stores) {
          stores[key].unsubscribe( changed );
        }
      },

      render: function() {
        var props = React.__spread( {}, this.props);
        for (var key in stores) {
          props[key] = stores[key].value;
        }

        return React.createElement(component, props);
      }

    });
  };

  $(document).ready(function() {
    var el;

    window.levelStore = new LevelStore();
    window.scriptStore = new ScriptStore();
    window.userProgressStore = new UserProgressStore();

    // For now, the current user's info is always pre-loaded in the page if logged in
    window.userInfoStore = new UserInfoStore();
    window.userInfoStore.save(window.user_info);

    window.Frame = new UIFrame();
    Frame.init();

    // Create components that are attached at known locations on the screen
    el = $('.header_middle');
    if (el.length) {
      // Create a component that's bound to global stores
      var AppHeaderBar = Watching(dashboard.components.HeaderBar, {
        level: window.levelStore,
        progress: window.userProgressStore
      });

      React.render(<AppHeaderBar />, el[0]);
    }

    el = $('.header_right');
    if (el.length) {
      // Create a component that's bound to global stores
      var AppHeaderActions = Watching(dashboard.components.HeaderActions, {
        user: window.userInfoStore,
        level: window.levelStore
      });

      React.render(<AppHeaderActions />, el[0]);
    }

    el = $('#reference_area');
    if (el.length) {
      // Create a component that's bound to global stores
      var AppReferenceArea = Watching(dashboard.components.ReferenceArea, {
        user: window.userInfoStore,
        level: window.levelStore
      });

      React.render(<AppReferenceArea />, el[0]);
    }

    el = $('#application');
    if (el.length) {
      var AppLevelContainer = Watching(dashboard.components.LevelContainer, {
        user: window.userInfoStore
      });

      React.render(<AppLevelContainer />, el[0]);
    }
  });

}).call(this);

// TODO: All of this needs to be converted
/*
dashboard.showProjectHeader = function () {
  function projectNameShow() {
    $('.project_name').replaceWith($('<div class="project_name header_text">').text(dashboard.currentApp.name));
    $('.project_save').replaceWith($('<div class="project_edit header_button">').text('<%= I18n.t('project.rename') %>'));
  }

  function projectNameEdit() {
    $('.project_name').replaceWith($('<input type="text" class="project_name header_input">').val(dashboard.currentApp.name));
    $('.project_edit').replaceWith($('<div class="project_save header_button">').text('<%= I18n.t('project.save') %>'));
  }

  var moreButton = '<%= I18n.t('project.more') %> '
      + '<span class="project_more_glyph">&#x25BC;</span>'
      + '<div class="project_more_popup" style="position: absolute;">'
      + '<a href="#"><%= I18n.t('project.delete') %></a><br>'
      + '<a href="#"><%= I18n.t('project.new') %></a></div>';
  $('.project_info').append($('<div class="project_name header_text">').text(dashboard.currentApp.name))
      .append($('<div class="project_edit header_button">').text('<%= I18n.t('project.rename') %>'))
      .append($('<div class="project_share header_button">').text('<%= I18n.t('project.share') %>'))
      .append($('<div class="project_more header_button" style="position: relative;">').html(moreButton));

  projectNameShow();
  $('.freeplay_links').empty().before($('<div class="project_list header_button">').text('<%= I18n.t('project.my_projects') %>'));

  $(document).on('click', '.project_edit', projectNameEdit);

  $(document).on('click', '.project_save', function () {
    $(this).attr('disabled', true);
    dashboard.currentApp.name = $('.project_name').val();
    dashboard.saveProject(function () {
      projectNameShow();
    });
  });

  var $projectMorePopup = $('.project_more_popup');
  function hideProjectMore() {
    $projectMorePopup.hide();
    $('.project_more_glyph').html('&#x25BC;');
    $(document).off('click', hideProjectMore);
  }
  $('.project_more').click(function (e) {
    if ($projectMorePopup.is(':hidden')) {
      e.stopPropagation();
      $projectMorePopup.show();
      $('.project_more_glyph').html('&#x25B2;');
      $(document).on('click', hideProjectMore);
    }
  });
  $projectMorePopup.click(function (e) {
    e.stopPropagation(); // Clicks inside the popup shouldn't close it
  });

  $(document).on('click', '.project_list', function () {
    location.href = '/p'; <%# TODO: Can't call project_list_path because it's not in scope %>
  });
};
*/
