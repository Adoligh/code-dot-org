// New private scope -- a lot of this is boilerplate for class structures, taken from coffeescript
(function() {
  var
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  var cs = React.addons.classSet;

  var TEMP_UPDATE = function() {
    this.setState({
      updated: Math.random()
    });
  }

  // ProgressBox: stage={} selected=id progress={}
  var ProgressBox = React.createClass({
    render: function() {
      var P = this.props || {};

      var stage = P.stage || {};
      var levels = stage.levels || [];
      if (!levels.length)
        return false;

      var levelProgress = P.progress.levels || {};

      var els = $.map(levels, function(level, index) {
        var status = levelProgress[level.id] || {};

        var href = Frame.linkTo({
          script: stage.script_name,
          stage: stage.position,
          level: level.position
        });

        var classes1 = {
          'puzzle_outer_level': level.kind != 'assessment',
          'puzzle_outer_assessment': level.kind == 'assessment',
          'puzzle_outer_current': level.id == P.selected,
          'last': index === levels.length - 1
        };

        var classes2 = {
          'level_link': true,
          'unplugged_level': level.kind == 'unplugged'
        };
        classes2[status.status || 'not_tried'] = true;

        return (
          <div className={cs(classes1)} key={level.id}>
            <a className={cs(classes2)} href={href}>{level.title}</a>
          </div>
        );
      });

      return <div className="progress_container">{els}</div>;
    }
  });


  // HeaderPopup: script="" progress={} selected=id onShow=fn 
  // + scriptStore
  var HeaderPopup = React.createClass({
    componentDidMount: function() {
      window.scriptStore.subscribe(__bind(TEMP_UPDATE, this));

      // Ask the script store to load a particular script.
      window.scriptStore.load({
        script_id: this.props.script_id
      });

    },

    render: function() {
      var P = this.props || {};

      var progress = P.progress || {};
      var levelProgress = progress.levels || {};
      var script = window.scriptStore.value;

      var body;
      if (!script) {
        body = <div className="loading" />;
      } else {

        var stages = $.map(script.stages, function(stage) {
          var lessonPlan;

          if (stage.lesson_plan_html_url) {
            // TODO: SHOW ONLY IF A TEACHER
            lessonPlan = (
              <div className="stage-lesson-plan-link">
                <a href={stage.lesson_plan_html_url}><%= I18n.t("view_lesson_plan") %></a>
              </div>
            );
          }

          var levels = $.map(stage.levels, function(level, index) {
            var status = levelProgress[level.id] || {};

            var href = Frame.linkTo({
              script: script.name,
              stage: stage.position,
              level: level.position
            });

            if (level.kind == 'unplugged') {
              contents = <span className="puzzle-named">{level.title}</span>;
            } else if (status.status == 'perfect' || status.status == 'perfect') {
              contents = <img src="/assets/white-checkmark.png" />;
            } else {
              contents = <span className="puzzle-number">{level.title}</span>;
            }

            var classes1 = {
              'puzzle_outer_level': true,
              'puzzle_outer_assessment': level.kind == 'assessment',
              'puzzle_outer_current': level.id == P.selected,
              'last': index === stage.levels.length - 1
            };

            var classes2 = {
              'level_link': true
            };
            classes2[status.status || 'not_tried'] = true;

            return (
              <div className="level" key={level.position}>
                <span className={cs(classes1)}>
                  <a className={cs(classes2)} href={href}>
                    { contents }
                  </a>
                </span>
              </div>
            );
          });

          return (
            <div className="game-group" key={stage.position}>
              <div className="stage">
                <span>{stage.title}</span>
                { lessonPlan }
              </div>
              <div className="games">
                { levels }
              </div>
            </div>
          );
        });

        body = (
          <div className="user-stats-block">
            { stages }
            <HeaderPopupKey />
          </div>
        );

      }

      var style = {
        'float': 'right'
      };

      return (
        <div className="header_popup">
          <div className="header_popup_header">
            <span><%= I18n.t("nav.popup.progress") %></span>
            <div className="header_text" style={style}>{progress.linesOfCodeText}</div>
          </div>
          <div className="header_popup_body">
            {body}
          </div>
          <div className="header_popup_footer">
            <div className="header_popup_close" onClick={this.handleClose}><%= I18n.t("nav.popup.close") %></div>
          </div>
        </div>
      );

    },

    handleClose: function(ev) {
      this.props.onShow(false);
    }
  });



  HeaderPopupKey = React.createClass({
    render: function() {
      return (
        <div className="key">
          <dl>
            <dt><span className="puzzle_outer_level"><a className="level_link not_tried"><span className="puzzle-number">1</span></a></span></dt>
            <dd><%= I18n.t("progress.not_completed") %></dd>
            <dt><span className="puzzle_outer_level"><a className="level_link passed"><span className="puzzle-number">2</span></a></span></dt>
            <dd><%= I18n.t("progress.completed_too_many_blocks") %></dd>
            <dt><span className="puzzle_outer_level"><a className="level_link perfect"><span className="puzzle-number">3</span></a></span></dt>
            <dd><%= I18n.t("progress.completed_perfect") %></dd>
          </dl>
        </div>
      );
    }
  });


  SignInButton = React.createClass({
    render: function() {
      return (
        <div className="header_user">
          <a href="/users/sign_in" id="signin_button" className="button-signin">
            <%= I18n.t("nav.user.signin") %>
          </a>
        </div>
      );
    }
  })


  var HeaderBar = React.createClass({
    render: function() {
      var P = this.props || {};
      var state = this.state || {};

      var thisLevel = P.level || {};
      var progress = P.progress || {};
      var script = thisLevel.script || {};
      var stage = thisLevel.stage || {};
      var level = thisLevel.level || {};

      // Don't render the progress buttons unless we are initialized with a script
      if (!script)
        return;

      // This is a bit of a hack.  Level.level.id gets overwritten when blockly initializes, so it's been cached in another
      // location until we can fix that.
      var level_id = level.level_id;
      if (!level_id && level.level)
        level_id = level.level.id;

      // Title
      var titleBox;
      if (stage.title) {
        titleBox = <div className="header_text header_level_text">{stage.title}</div>;
      }

      // Finished link
      var finishLink;
      if (stage.finishText) {
        var href = Frame.linkTo({
          complete: stage.script_name
        });

        finishLink = (
          <div className="header_finished_link">
            <a href={href}>{stage.finishText}</a>
          </div>
        );
      }

      // Trophies
      var trophyLink;
      if (progress.trophies) {
        trophyLink = (
          <span className="header_trophy_link" onClick={this.onTrophyClick}>
            <div className="header_text"><%= I18n.t(:trophies) %></div>
            <div className="header_status_bar current_trophies">{progress.trophies.current}</div>
            <div className="header_text max_trophies">{progress.trophies.of + ' ' + progress.trophies.max}</div>
          </span>
        );
      }

      // More less toggle
      var popupToggle;
      if (stage.script_stages > 1 || progress.trophies) {
        var arrow, label;

        if (state.popped) {
          arrow = <div className="header_popup_link_glyph">&#x25B2;</div>; // ▲
          label = '<%= I18n.t(:less) %>';
        } else {
          arrow = <div className="header_popup_link_glyph">&#x25BC;</div>; // ▼
          label = '<%= I18n.t(:more) %>';
        }

        popupToggle = (
          <span className="header_popup_link" onClick={this.onTogglePopup}>
            { arrow }
            <div className="header_popup_link_text">{label}</div>
          </span>
        );
      }

      // TODO: $('.freeplay_links').show(); or hide();

      // Popup stage navigation
      var headerPopup;
      if (state.popped) {
        headerPopup = <HeaderPopup script_id={stage.script_id} progress={progress} selected={level_id} onShow={this.showPopup} />;
        // Catch clicks anywhere else and close the popup
        $(document).on('click', this.onModalClick);
      } else {
        $(document).off('click', this.onModalClick);
      }

      return (
        <div>
          <div className="header_level">
            <div className="header_level_container">
              { titleBox }
              <ProgressBox stage={stage} selected={level_id} progress={progress} />
              { finishLink }
              { trophyLink }
              { popupToggle }
            </div>
          </div>
          { headerPopup }
        </div>
      );
    },

    componentDidUpdate: function() {
      if (this.state && this.state.jumpToTrophies) {
        var el = $('#trophies');
        if (el.length) {
          var off = el.offset();
          if (off)
            window.scrollTo(0, +off.top);
          this.setState({ jumpToTrophies: false });
        }
      }
    },

    // Three possible arguments: true, false, or "trophies" (the last one autoscrolls the page to the bottom of the popup)
    showPopup: function(show) {
      this.setState({
        popped: !!show,
        jumpToTrophies: show == 'trophies'
      });
    },

    onTrophyClick: function(ev) {
      this.showPopup("trophies");
      ev.stopPropagation();
    },
    onTogglePopup: function(ev) {
      this.showPopup(!this.state.popped);
      ev.stopPropagation();
    },

    onModalClick: function(ev) {
      var el;

      // Clicks outside the popup close it
      el = $(ev.target).closest('.header_popup, .header_popup_link');
      if (!el.length) {
        this.showPopup(false);
        return;
      }
    }
  });



  // ReferenceArea level={}
  var ReferenceArea = React.createClass({
    render: function() {
      var P = this.props || {};
      var state = P.level || {};
      var level = state.level || {}

      // if (current_user.teacher? || current_user.admin?)
      var solutionLink;
      if (level.solutionPath) {
        solutionLink = (
          <div className="solution_link">
            <a href={level.solutionPath}><%= I18n.t("reference_area.teacher") %></a>
          </div>
        );
      }

      var relatedVideos = [];
      if (level.relatedVideos) {
        relatedVideos.push(<p className="help_title"><%= I18n.t("reference_area.title") %></p>);
        relatedVideos.push(<p className="help_subtitle"><%= I18n.t("reference_area.subtitle") %></p>);

        for (var i = 0; i < level.relatedVideos.length; i++) {
          var video = level.relatedVideos[i];

          // TODO: does the data work?
          relatedVideos.push(
            <a data={video.data} href="#" className="video_link" onClick={this.onVideoClick}>
              <img className="video_thumbnail" src={video.thumbnail_url} width={39*4.7} />
              <div className="video_name"><span>{video.name}</span></div>
            </a>
          );

          if ((i % 2) == 1)
            relatedVideos.push(<div className="clear" />);
        }

        relatedVideos.push(<div className="clear" />);
      }

      return (
        <div className="reference_area">
          { solutionLink }
          { relatedVideos }
        </div>
      );
    },

    onVideoClick: function(ev) {
      var el = $(el.target);

      showVideoDialog( $.extend({
        enable_fallback: true,
        autoplay: true
      }, el.data()) );
    }
  });



  var Application = React.createClass({
    componentDidMount: function() {
      var dom = this.getDOMNode();

      // Show the slow-loading warning if it takes more than 10 seconds to initialize
      setTimeout(function() {
        $(dom).find('.slow_load').show();
      }, 10000);

      // When the levelStore gets data, update blockly
      window.levelStore.subscribe( function(data) {

        data.level.level_id = data.level.level.id; // because level.id gets overwritten by the DIV id inside blockly somewhere

        // Set up the blockly options, starting from some default values
        var opts = $.extend({
          baseUrl: '/blockly/',
          containerId: dom.id,
          script_name: data.stage.script_name,
          scriptPath: Frame.linkTo({
              script: data.stage.script_name,
              stage: data.stage.position,
              level: data.level.position
            }, true) // Normalize for a live URL because these are just tracking metrics
        }, data.level);

        // Blockly baseUrl must be an absolute path.
        opts.baseUrl = Frame.getAbsolutePath(opts.baseUrl);
        opts.level.stage_name = data.stage.name;

        switch (opts.app) {
          case 'maze':
            this.app = new BlocklyApp(opts);
            this.app.init();
            break;
        }
      });

    },

    render: function() {
      return (
        <div id="gogogo">
          <div className="loading" />
          <div className="slow_load">
            <div><%= I18n.t(:slow_loading) %></div>
            <a href="javascript: location.reload();"><%= I18n.t(:try_reloading) %></a>
          </div>
        </div>
      );
    }
  });


  // This is a wrapper to create a NEW component that watches some Stores and renders a component
  // using the values from those stores as properties.
  // TODO: formalize its location/usage
  Watching = function(component, stores) {
    return component.Watching = React.createClass({
      componentDidMount: function() {
        var changed = __bind(TEMP_UPDATE, this);

        for (var key in stores) {
          var store = (stores[key] || this.props[key + "Store"]);
          if (!store || !store.subscribe) {
            delete stores[key];
            continue;
          }

          stores[key] = store;
          store.subscribe( changed );
        }
      },

      componentDidUnmount: function() {
        for (var key in stores) {
          stores[key].unsubscribe( changed );
        }
      },

      render: function() {
        var props = React.__spread( {}, this.props);
        for (var key in stores) {
          props[key] = stores[key].value;
        }

        return React.createElement(component, props);
      }

    });
  };



  $(document).ready(function() {
    var el;

    window.levelStore = new LevelStore();
    window.scriptStore = new ScriptStore();
    window.userProgressStore = new UserProgressStore();

    window.Frame = new UIFrame();
    Frame.init();


    // Create component classes that are bound to the Stores
    var AppHeaderBar = Watching(HeaderBar, {
      level: window.levelStore,
      progress: window.UserProgressStore
    });
    var AppReferenceArea = Watching(ReferenceArea, {
      level: window.levelStore
    });

    // Create components that are attached at known locations on the screen
    el = $('.header_middle');
    if (el.length) {
      React.render(<AppHeaderBar />, el[0]);
    }

    el = $('#reference_area');
    if (el.length) {
      React.render(<AppReferenceArea />, el[0]);
    }

    el = $('#application');
    if (el.length) {
      React.render(<Application />, el[0]);
    }

    if (!Frame.isStatic) {
      // The user signin button is rendered by client code if it wasn't sent by the server
      // Don't show it if offline
      var $right = $('.header_right');
      if (!$right.find('.header_user').length) {
        React.render(<SignInButton />, $right[0]);
      }
    }

  });


}).call(this);
