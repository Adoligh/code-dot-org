// New private scope -- a lot of this is boilerplate for class structures, taken from coffeescript
(function() {
  var
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  var cs = React.addons.classSet;

  var TEMP_UPDATE = function() {
    // TODO: Investigate why this is sometimes called before the component has mounted.
    if (this._lifeCycleState == "UNMOUNTED")
      return;

    this.setState({
      updated: Math.random()
    });
  }

  // ProgressBox: stage={} selected=id progress={}
  var ProgressBox = React.createClass({
    render: function() {
      var P = this.props || {};

      var stage = P.stage || {};
      var levels = stage.levels || [];
      if (!levels.length)
        return false;

      var levelProgress = P.progress.levels || {};

      var els = $.map(levels, function(level, index) {
        var status = levelProgress[level.id] || {};

        var href = Frame.linkTo({
          script: stage.script_name,
          stage: stage.position,
          level: level.position
        });

        var classes1 = {
          'puzzle_outer_level': level.kind != 'assessment',
          'puzzle_outer_assessment': level.kind == 'assessment',
          'puzzle_outer_current': level.id == P.selected,
          'last': index === levels.length - 1
        };

        var classes2 = {
          'level_link': true,
          'unplugged_level': level.kind == 'unplugged'
        };
        classes2[status.status || 'not_tried'] = true;

        return (
          <div className={cs(classes1)} key={level.id}>
            <a className={cs(classes2)} href={href}>{level.title}</a>
          </div>
        );
      });

      return <div className="progress_container">{els}</div>;
    }
  });


  // HeaderPopup: script="" progress={} selected=id onShow=fn 
  // + scriptStore
  var HeaderPopup = React.createClass({
    getInitialState: function() {
      return {
        jumpToTrophies: this.props.jumpToTrophies  // props is the initial state
      };
    },

    componentDidMount: function() {
      window.scriptStore.subscribe(__bind(TEMP_UPDATE, this));
      window.userInfoStore.subscribe(__bind(TEMP_UPDATE, this));

      // Ask the script store to load a particular script.
      window.scriptStore.load({
        script_id: this.props.script_id
      });

    },

    render: function() {
      var P = this.props || {};

      var progress = P.progress || {};
      var levelProgress = progress.levels || {};
      var script = window.scriptStore.value;
      var user = window.userInfoStore.value || {};

      var body;
      if (!script) {
        body = <div className="loading" />;
      } else {

        var stages = $.map(script.stages || [], function(stage) {
          var lessonPlan;

          if (stage.lesson_plan_html_url && user.teacher) {
            lessonPlan = (
              <div className="stage-lesson-plan-link">
                <a href={stage.lesson_plan_html_url}><%= I18n.t("view_lesson_plan") %></a>
              </div>
            );
          }

          var levels = $.map(stage.levels, function(level, index) {
            var status = levelProgress[level.id] || {};

            var href = Frame.linkTo({
              script: script.name,
              stage: stage.position,
              level: level.position
            });

            if (level.kind == 'unplugged') {
              contents = <span className="puzzle-named">{level.title}</span>;
            } else if (status.status == 'perfect' || status.status == 'perfect') {
              contents = <img src={Frame.assetUrl('white-checkmark.png')} />;
            } else {
              contents = <span className="puzzle-number">{level.title}</span>;
            }

            var classes1 = {
              'puzzle_outer_level': true,
              'puzzle_outer_assessment': level.kind == 'assessment',
              'puzzle_outer_current': level.id == P.selected,
              'last': index === stage.levels.length - 1
            };

            var classes2 = {
              'level_link': true
            };
            classes2[status.status || 'not_tried'] = true;

            return (
              <div className="level" key={level.position}>
                <span className={cs(classes1)}>
                  <a className={cs(classes2)} href={href}>
                    { contents }
                  </a>
                </span>
              </div>
            );
          });

          return (
            <div className="game-group" key={stage.position}>
              <div className="stage">
                <span>{stage.title}</span>
                { lessonPlan }
              </div>
              <div className="games">
                { levels }
              </div>
            </div>
          );
        });

        var stages_key;
        if (stages.length)
          stages_key = <HeaderPopupKey />

        var trophies;
        if (script.trophies) {
          var trophy_progress = P.progress.trophies || {};

          var centered = { textAlign: 'center' };
          trophy_progress = $.map(script.trophies, function(trophy) {

            var completion = trophy_progress[trophy.id];
            var bronze = Math.max(0, Math.min(100, Math.floor( completion * 10.0 / trophy.bronze) * 10));
            var silver = Math.max(0, Math.min(100, Math.floor( (completion - trophy.bronze) * 10.0 / (trophy.silver - trophy.bronze)) * 10));
            var gold = Math.max(0, Math.min(100, Math.floor( (completion - trophy.silver) * 10.0 / (trophy.gold - trophy.silver)) * 10));

            return (
              <tr height="55px">
                <td width="100px">
                  { trophy.name }
                </td>
                <td style={centered} width="55px">
                  <img className="trophy_image" src={Frame.assetUrl('bronze_', bronze, '.png')} />
                </td>
                <td style={centered} width="55px">
                  <img className="trophy_image" src={Frame.assetUrl('silver_', silver, '.png')} />
                </td>
                <td style={centered} width="55px">
                  <img className="trophy_image" src={Frame.assetUrl('gold_', gold, '.png')} />
                </td>
              </tr>
            );
          });

          var blocked = {
            display: 'inline-block',
            width: 290,
            position: 'relative',
            overflow: 'hidden',
            padding: 10
          };
          trophies = (
            <div id="trophies">
              <div style={blocked}>
                <h4><%= I18n.t("nav.popup.mastery") %></h4>
                <table style={{ maxWidth: 290 }}>
                  {trophy_progress}
                </table>
              </div>
            </div>
          );
        }

        body = (
          <div className="user-stats-block">
            { stages }
            { stages_key }
            { trophies }
          </div>
        );

      }

      var style = {
        'float': 'right'
      };

      return (
        <div className="header_popup">
          <div className="header_popup_header">
            <span><%= I18n.t("nav.popup.progress") %></span>
            <div className="header_text" style={style}>{progress.linesOfCodeText}</div>
          </div>
          <div className="header_popup_body">
            {body}
          </div>
          <div className="header_popup_footer">
            <div className="header_popup_close" onClick={this.handleClose}><%= I18n.t("nav.popup.close") %></div>
          </div>
        </div>
      );

    },

    componentDidUpdate: function() {
      if (this.state.jumpToTrophies) {
        var el = $('#trophies');
        if (el.length) {
          var off = el.offset();
          if (off)
            window.scrollTo(0, +off.top);
          this.setState({ jumpToTrophies: false });
        }
      }
    },

    handleClose: function(ev) {
      this.props.onShow(false);
    }
  });



  HeaderPopupKey = React.createClass({
    render: function() {
      return (
        <div className="key" style={{ clear: 'both' }}>
          <dl>
            <dt><span className="puzzle_outer_level">
              <a className="level_link not_tried"><span className="puzzle-number">1</span></a>
            </span></dt>
            <dd><%= I18n.t("progress.not_started") %></dd>
          </dl><dl>
            <dt><span className="puzzle_outer_level">
              <a className="level_link attempted"><span className="puzzle-number">1</span></a>
            </span></dt>
            <dd><%= I18n.t("progress.in_progress") %></dd>
          </dl><dl>
            <dt><span className="puzzle_outer_level">
              <a className="level_link passed"><img src={Frame.assetUrl('white-checkmark.png')} /></a>
            </span></dt>
            <dd><%= I18n.t("progress.completed_too_many_blocks") %></dd>
          </dl><dl>
            <dt><span className="puzzle_outer_level">
              <a className="level_link perfect"><img src={Frame.assetUrl('white-checkmark.png')} /></a>
            </span></dt>
            <dd><%= I18n.t("progress.completed_perfect") %></dd>
          </dl><dl>
            <dt><span className="puzzle_outer_level puzzle_outer_assessment">
              <a className="level_link not_tried"><span className="puzzle-number">1</span></a>
            </span></dt>
            <dd><%= I18n.t("progress.assessment") %></dd>
          </dl>
        </div>
      );
    }
  });


  SignInButton = React.createClass({
    getInitialState: function() {
      return { popped: false };
    },

    render: function() {
      var P = this.props || {};
      var S = this.state || {};

      if (P.user) {
        var greeting = "<%= I18n.t('nav.user.label', username: '***') %>".replace("***", P.user.username);

        var menu;
        if (!S.popped) {
          arrow = <span className="user_menu_glyph">&#x25BC;</span>; // ▼
        } else {
          arrow = <span className="user_menu_glyph">&#x25B2;</span>; // ▲

          options = [];
          if (P.user.teacher)
            options.push(<a key="dashboard" href={P.user.actions.dashboard}><%= I18n.t("nav.user.classroom") %></a>);
          options.push(<a key="root" href={Frame.rootUrl}><%= I18n.t("nav.user.stats") %></a>);
          options.push(<a key="settings" href={P.user.actions.settings}><%= I18n.t("nav.user.settings") %></a>);
          if (P.user.teacher && (P.user.teacher_prize || P.user.bonus_prize))
            options.push(<a key="prize" href={P.user.actions.prizes}><%= I18n.t("nav.user.prizes") %></a>);
          options.push(<a key="signout" href={P.user.actions.signout}><%= I18n.t("nav.user.logout") %></a>);

          menu = (
            <div style={{ position: 'relative', top: 3 }}>
              <div className="user_options">
                { options }
              </div>
            </div>
          );
        }

        return (
          <span className="user_menu">
            <div className="header_button header_user" onClick={this.onOpenClick}>
              <span>{greeting} </span>
              { arrow }
            </div>
            { menu }
          </span>
        );
      } else if (!Frame.isSinglePage) {
        return (
          <div className="header_button header_user">
            <a href={ Frame.linkTo({ signin: true }) } id="signin_button" className="button-signin">
              <%= I18n.t("nav.user.signin") %>
            </a>
          </div>
        );
      } else {
        return false;
      }
    },

    componentDidUpdate: function() {
      if (this.state.popped) {
        // Catch clicks anywhere else and close the popup
        $(document).on('click', this.onModalClick);
      } else {
        $(document).off('click', this.onModalClick);
      }
    },

    onOpenClick: function(ev) {
      this.setState({ popped: !this.state.popped });
    },

    onModalClick: function(ev) {
      // Don't count a click on the button - that's handled in onOpenClick
      var el = $(ev.target).closest('.header_button');
      if (el.length)
        return;

      this.setState({ popped: false });
    }

  })


  var HeaderBar = React.createClass({
    getInitialState: function() {
      return { popped: false };
    },

    render: function() {
      var P = this.props || {};
      var state = this.state || {};

      var thisLevel = P.level || {};
      var progress = P.progress || {};
      var script = thisLevel.script || {};
      var stage = thisLevel.stage || {};
      var level = thisLevel.level || {};

      // Don't render the progress buttons unless we are initialized with a script
      if (!script)
        return;

      // This is a bit of a hack.  Level.level.id gets overwritten when blockly initializes, so it's been cached in another
      // location until we can fix that.
      var level_id = level.level_id;
      if (!level_id && level.level)
        level_id = level.level.id;

      // Title
      var titleBox;
      if (stage.title) {
        titleBox = <div className="header_text header_level_text">{stage.title}</div>;
      }

      // Finished link
      var finishLink;
      if (stage.finishText) {
        var href = Frame.linkTo({
          complete: stage.script_name
        });

        finishLink = (
          <div className="header_finished_link">
            <a href={href}>{stage.finishText}</a>
          </div>
        );
      }

      // Trophies
      var trophyLink;
      if (progress.trophies) {
        trophyLink = (
          <span className="header_trophy_link" onClick={this.onTrophyClick}>
            <div className="header_text"><%= I18n.t(:trophies) %></div>
            <div className="header_status_bar current_trophies">{progress.trophies.current}</div>
            <div className="header_text max_trophies">{progress.trophies.of + ' ' + progress.trophies.max}</div>
          </span>
        );
      }

      // More less toggle
      var popupToggle;
      if (stage.script_stages > 1 || progress.trophies) {
        var arrow, label;

        if (state.popped) {
          arrow = <div className="header_popup_link_glyph">&#x25B2;</div>; // ▲
          label = '<%= I18n.t(:less) %>';
        } else {
          arrow = <div className="header_popup_link_glyph">&#x25BC;</div>; // ▼
          label = '<%= I18n.t(:more) %>';
        }

        popupToggle = (
          <span className="header_popup_link" onClick={this.onTogglePopup}>
            { arrow }
            <div className="header_popup_link_text">{label}</div>
          </span>
        );
      }

      // Popup stage navigation
      var headerPopup;
      if (state.popped)
        headerPopup = <HeaderPopup script_id={stage.script_id} progress={progress} selected={level_id} jumpToTrophies={state.jumpToTrophies} onShow={this.showPopup} />;

      return (
        <div>
          <div className="header_level">
            <div className="header_level_container">
              { titleBox }
              <ProgressBox stage={stage} selected={level_id} progress={progress} />
              { finishLink }
              { trophyLink }
              { popupToggle }
            </div>
          </div>
          { headerPopup }
        </div>
      );
    },

    componentDidUpdate: function() {
      if (this.state.popped) {
        // Catch clicks anywhere else and close the popup
        $(document).on('click', this.onModalClick);
      } else {
        $(document).off('click', this.onModalClick);
      }
    },

    getInitialState: function() {
      return {
        popped: false,
        jumpToTrophies: false
      };
    },

    // Three possible arguments: true, false, or "trophies" (the last one autoscrolls the page to the bottom of the popup)
    showPopup: function(show) {
      this.setState({
        popped: !!show,
        jumpToTrophies: show == 'trophies'
      });
    },

    onTrophyClick: function(ev) {
      this.showPopup("trophies");
      ev.stopPropagation();
    },
    onTogglePopup: function(ev) {
      this.showPopup(!this.state.popped);
      ev.stopPropagation();
    },

    onModalClick: function(ev) {
      var el;

      // Clicks outside the popup close it
      el = $(ev.target).closest('.header_popup, .header_popup_link');
      if (!el.length) {
        this.showPopup(false);
        return;
      }
    }
  });



  // ReferenceArea level={}
  var ReferenceArea = React.createClass({
    render: function() {
      var P = this.props || {};
      var user = P.user || {};
      var state = P.level || {};
      var level = state.level || {}

      var solutionLink;
      if (level.solutionPath && (user.admin || user.teacher)) {
        solutionLink = (
          <div className="solution_link">
            <a href={level.solutionPath}><%= I18n.t("reference_area.teacher") %></a>
          </div>
        );
      }

      var relatedVideos = [];
      if (level.relatedVideos) {
        relatedVideos.push(<p key="title" className="help_title"><%= I18n.t("reference_area.title") %></p>);
        relatedVideos.push(<p key="subtitle" className="help_subtitle"><%= I18n.t("reference_area.subtitle") %></p>);

        for (var i = 0; i < level.relatedVideos.length; i++) {
          var video = level.relatedVideos[i];

          // React may eventually offer an easier way to add multiple data- attributes...
          relatedVideos.push(
            <a key={video.data.key} href="#" className="video_link" onClick={this.onVideoClick}
              data-download={video.data.download}
              data-key={video.data.key}
              data-name={video.data.name}
              data-src={video.data.src}
            >
              <img className="video_thumbnail" src={video.thumbnail_url} width={39*4.7} />
              <div className="video_name"><span>{video.name}</span></div>
            </a>
          );

          if ((i % 2) == 1)
            relatedVideos.push(<div key={"br" + i} className="clear" />);
        }

        relatedVideos.push(<div key="end" className="clear" />);
      }

      return (
        <div className="reference_area" style={{ display: 'none' }}>
          { solutionLink }
          { relatedVideos }
        </div>
      );
    },

    onVideoClick: function(ev) {
      var el = $(ev.target).closest('.video_link');

      showVideoDialog( $.extend({
        enable_fallback: true,
        autoplay: true
      }, el.data()) );
    }
  });


  // LevelContainer user={}
  var LevelContainer = React.createClass({
    getInitialState: function() {
      return { component: null };
    },

    render: function() {
      // If the level has loaded, display it
      if (this.state.component)
        return this.state.component;

      // Otherwise display the loader-progress
      return (
        <div id="appcontainer">
          <div className="loading" />
          <div className="slow_load">
            <div><%= I18n.t(:slow_loading) %></div>
            <a href="javascript: location.reload();"><%= I18n.t(:try_reloading) %></a>
          </div>
        </div>
      );
    },

    componentDidMount: function() {
      var dom = this.getDOMNode();

      // Show the slow-loading warning if it takes more than 10 seconds to initialize
      setTimeout(function() {
        $(dom).find('.slow_load').show();
      }, 10000);

      // When the levelStore gets data, update blockly
      window.levelStore.subscribe( __bind(this.onNewLevel, this) );
    },

    onNewLevel: function(data) {
      var opts = data.level;

      // Create .scriptPath that's used for tracking metrics on a live URL
      opts.scriptPath = Frame.linkTo({
        script: data.stage.script_name,
        stage: data.stage.position,
        level: data.level.position
      }, true);
      opts.script_name = data.stage.script_name;
      opts.level.stage = data.stage.position;
      opts.level.stage_name = data.stage.name;

      // Determine which level component to render
      switch (opts.app) {
        case 'unplugged':
          this.setState({
            component: <UnpluggedLevel user={this.props.user} stage={data.stage} level={data.level} app={new UnpluggedApp(opts)} />
          });
          break;

        // TODO OFFLINE: Convert these level types
        case 'multi':
        case 'match':
          break;

        // BlocklyApp is not implemented as a React component so we have to do something a bit tricky
        case 'maze':
        case 'jigsaw':
        case 'bounce':
        case 'turtle':
        case 'flappy':
        case 'unplug':
        case 'studio':
        default:
          // Store this because level.id gets overwritten by the DIV id inside blockly somewhere
          opts.level_id = opts.level.id;

          // Set up some blockly options.  baseUrl must be an absolute path.
          opts.baseUrl = Frame.getAbsolutePath('/blockly/');

          // Render a blockly app on top of our DOM
          opts.containerId = this.getDOMNode().id;
          var app = new BlocklyApp(opts);
          app.startBlockly();
          break;
      }
    }

  });


  // UnpluggedLevel user={} level={} stage={} app={}
  var UnpluggedLevel = React.createClass({
    render: function() {
      var P = this.props || {};
      var level = P.level;
      var stage = P.stage || {};

      if (!level)
        return false;

      var video_download;
      if (level.video && level.video.download)
        video_download = <a className="video-download btn pull-right" href={level.video.download}><%= I18n.t('video.download') %></a>;

      var lesson_plans, pegasus_lessons;
      var is_student = P.user && P.user.student;
      if (!is_student) {
        if (stage.lesson_plan_html_url)
          pegasus_lessons = (
            <div className="lesson-plan">
              <h2><%= I18n.t(:lesson_plan) %></h2>
              <a className="btn pdf-button" href={stage.lesson_plan_html_url} target="_blank"><%= I18n.t(:view_lesson_plan) %></a>
              <a className="btn pdf-button" href={stage.lesson_plan_pdf_url} target="_blank"><%= I18n.t(:pdf_download) %></a>
            </div>
          );

        if (level.pdfs)
          lesson_plans = $.map(level.pdfs, function(pdf) {
            return <a key={pdf.name} className="btn pull-right pdf-button" href={ Frame.assetUrl(pdf.url) } target="_blank">{ pdf.name }</a>;
          });
        else if (!pegasus_lessons)
          lesson_plans = <a className="btn pull-right pdf-button disabled"><%= I18n.t('download_coming_soon') %></a>;
      }

      var video;
      if (level.video)
        video = (
          <div className="video-container" />
        );
      else
        video = (
          <p className="coming-soon"><%= I18n.t(:video_coming_soon) %></p>
        );

      return (
        <div className="unplugged">
          <h2>{level.title}</h2>
          <p>{level.desc}</p>
          <div className="video-section">
            <a className="btn btn-primary next-stage" onClick={this.onNextClick}><%= I18n.t(:next_stage) %></a>
            { video_download }
            { lesson_plans }
            <div className="clear" />
            { video }
          </div>
          <div className="clear" />
          { pegasus_lessons }
        </div>
      );

    },

    componentDidMount: function() {
      var el = $('.video-container');
      if (el.length) {
        // TODO: Is the video ever anything but 800px?  (page_width was coming from server)
        el.html('');
        el.append(createVideoWithFallback(this.props.level.video, 800, 800 / (16 / 9)))
      }
    },

    onNextClick: function() {
      var app = this.props.app;

      // Some of these parameters may not be necessary.
      app.onAttempt({
        app: 'unplug',
        level: this.props.level.level_num,
        pass: true,
        result: true,
        testResult: 100,
        onComplete: app.onContinue // It's already bound to app
      });
    }

  });


  var HeaderActions = React.createClass({
    render: function() {
      var P = this.props;
      var level = P.level || {};

      var actions = [];
      if (level.actions) {
        for (var i = 0; i < level.actions.length; i++) {
          var action = level.actions[i];

          var classes = {
            'fa': true
          };
          classes[action.icon] = true;

          actions.push(
            <a key={action.icon} className="header_status_bar level_free_play" title={action.label} href={Frame.linkTo(action.link)}>
              <i className={cs(classes)} />
            </a>
          );
        }

        actions = (
          <span className="header_actions freeplay_links">
            {actions}
          </span>
        );
      }

      return (
        <div>
          { actions }
          <SignInButton user={P.user} />
        </div>
      );

    },

    componentDidUpdate: function() {
      // Register the QTIP for any header actions we created
      $('.header_actions > a').qtip({
        content: {
          attr: 'title'
        },
        position: {
          my: 'top center',
          at: 'bottom center'
        }
      });
    }
  });



  // This is a wrapper to create a NEW component that watches some Stores and renders a component
  // using the values from those stores as properties.
  // TODO: formalize its location/usage
  Watching = function(component, stores) {
    return component.Watching = React.createClass({
      componentDidMount: function() {
        var changed = __bind(TEMP_UPDATE, this);

        for (var key in stores) {
          var store = (stores[key] || this.props[key + "Store"]);
          if (!store || !store.subscribe) {
            delete stores[key];
            continue;
          }

          stores[key] = store;
          store.subscribe( changed );
        }
      },

      componentDidUnmount: function() {
        for (var key in stores) {
          stores[key].unsubscribe( changed );
        }
      },

      render: function() {
        var props = React.__spread( {}, this.props);
        for (var key in stores) {
          props[key] = stores[key].value;
        }

        return React.createElement(component, props);
      }

    });
  };



  $(document).ready(function() {
    var el;

    window.levelStore = new LevelStore();
    window.scriptStore = new ScriptStore();
    window.userProgressStore = new UserProgressStore();

    // For now, the current user's info is always pre-loaded in the page if logged in
    window.userInfoStore = new UserInfoStore();
    window.userInfoStore.save(window.user_info);

    window.Frame = new UIFrame();
    Frame.init();

    // Create components that are attached at known locations on the screen
    el = $('.header_middle');
    if (el.length) {
      // Create a component that's bound to global stores
      var AppHeaderBar = Watching(HeaderBar, {
        level: window.levelStore,
        progress: window.userProgressStore
      });

      React.render(<AppHeaderBar />, el[0]);
    }

    el = $('.header_right');
    if (el.length) {
      // Create a component that's bound to global stores
      var AppHeaderActions = Watching(HeaderActions, {
        user: window.userInfoStore,
        level: window.levelStore
      });

      React.render(<AppHeaderActions />, el[0]);
    }

    el = $('#reference_area');
    if (el.length) {
      // Create a component that's bound to global stores
      var AppReferenceArea = Watching(ReferenceArea, {
        user: window.userInfoStore,
        level: window.levelStore
      });

      React.render(<AppReferenceArea />, el[0]);
    }

    el = $('#application');
    if (el.length) {
      var AppLevelContainer = Watching(LevelContainer, {
        user: window.userInfoStore
      });

      React.render(<AppLevelContainer />, el[0]);
    }

  });



}).call(this);







// TODO: All of this needs to be converted
/*
dashboard.showProjectHeader = function () {
  function projectNameShow() {
    $('.project_name').replaceWith($('<div class="project_name header_text">').text(dashboard.currentApp.name));
    $('.project_save').replaceWith($('<div class="project_edit header_button">').text('<%= I18n.t('project.rename') %>'));
  }

  function projectNameEdit() {
    $('.project_name').replaceWith($('<input type="text" class="project_name header_input">').val(dashboard.currentApp.name));
    $('.project_edit').replaceWith($('<div class="project_save header_button">').text('<%= I18n.t('project.save') %>'));
  }

  var moreButton = '<%= I18n.t('project.more') %> '
      + '<span class="project_more_glyph">&#x25BC;</span>'
      + '<div class="project_more_popup" style="position: absolute;">'
      + '<a href="#"><%= I18n.t('project.delete') %></a><br>'
      + '<a href="#"><%= I18n.t('project.new') %></a></div>';
  $('.project_info').append($('<div class="project_name header_text">').text(dashboard.currentApp.name))
      .append($('<div class="project_edit header_button">').text('<%= I18n.t('project.rename') %>'))
      .append($('<div class="project_share header_button">').text('<%= I18n.t('project.share') %>'))
      .append($('<div class="project_more header_button" style="position: relative;">').html(moreButton));

  projectNameShow();
  $('.freeplay_links').empty().before($('<div class="project_list header_button">').text('<%= I18n.t('project.my_projects') %>'));

  $(document).on('click', '.project_edit', projectNameEdit);

  $(document).on('click', '.project_save', function () {
    $(this).attr('disabled', true);
    dashboard.currentApp.name = $('.project_name').val();
    dashboard.saveProject(function () {
      projectNameShow();
    });
  });

  var $projectMorePopup = $('.project_more_popup');
  function hideProjectMore() {
    $projectMorePopup.hide();
    $('.project_more_glyph').html('&#x25BC;');
    $(document).off('click', hideProjectMore);
  }
  $('.project_more').click(function (e) {
    if ($projectMorePopup.is(':hidden')) {
      e.stopPropagation();
      $projectMorePopup.show();
      $('.project_more_glyph').html('&#x25B2;');
      $(document).on('click', hideProjectMore);
    }
  });
  $projectMorePopup.click(function (e) {
    e.stopPropagation(); // Clicks inside the popup shouldn't close it
  });

  $(document).on('click', '.project_list', function () {
    location.href = '/p'; <%# TODO: Can't call project_list_path because it's not in scope %>
  });
};
*/
