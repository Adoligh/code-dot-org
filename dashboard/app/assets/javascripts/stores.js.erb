// New private scope -- a lot of this is boilerplate for class structures, taken from coffeescript
(function() {
  var
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };


  // class LevelStore extends UIStore
  var LevelStore = (function(_super) {
    __extends(LevelStore, _super);

    // Must have a constructor
    function LevelStore() {
      return LevelStore.__super__.constructor.apply(this, arguments);
    }

    LevelStore.prototype.resolveUrl = function(args, dataType) {
      return "/popup/progress";
    }

    LevelStore.prototype.resolveStatic = function(args) {
      return "/level-" + (args.script_name || args.script_id) + "-" + (args.stage_id || "1") + "-" + args.level_id;
    }

    LevelStore.prototype.save = function(data) {
      window.userProgressStore.save(data.progress);
      return LevelStore.__super__.save.apply(this, arguments);
    }

    return LevelStore;
  })(UIStore);


  // ScriptStore: load the script progress (used in the header dropdown)
  var ScriptStore = (function(_super) {
    __extends(ScriptStore, _super);

    // Must have a constructor
    function ScriptStore() {
      return ScriptStore.__super__.constructor.apply(this, arguments);
    }

    ScriptStore.prototype.resolveUrl = function(args, dataType) {
      return "/popup/script";
    }

    ScriptStore.prototype.resolveStatic = function(args) {
      return "/script-" + (args.script_name || args.script_id);
    }

    return ScriptStore;
  })(UIStore);


  // UserProgressStore: stores the current user's progress
  var UserProgressStore = (function(_super) {
    __extends(UserProgressStore, _super);

    // Must have a constructor
    function UserProgressStore() {
      return UserProgressStore.__super__.constructor.apply(this, arguments);
    }

    return UserProgressStore;
  })(UIStore);


  // For now, create a global.  Later, this should be in module.exports
  // (Note these are already global since they're not declared via 'var'.
  window.ScriptStore = ScriptStore;
  window.UserProgressStore = UserProgressStore;
  window.LevelStore = LevelStore;

}).call(this);
