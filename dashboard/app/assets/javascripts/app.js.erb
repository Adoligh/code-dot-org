// ****************
//  IMPORTANT NOTE
// ****************
//
// This file contains proof-of-concept code (though it's safe for production)
// - UIComponent is an example React implementation
// - UIStore is an example Flux implementation
// - UIRouter is a really simple router
//
// These classes (and the derived ones) look pretty 'bulky' as they are written today.
// If we begin using React, this file will shrink to less than half of its current size.
// With CoffeeScript it'll shrink at least another half.
// There's really not that much "logic" here, it's just boilerplate that can be eliminated!

// New private scope -- a lot of this is boilerplate for class structures, taken from coffeescript
(function() {
  var
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };


  // class UIComponent: this is a lightweight inheritable class modeled after React
  var UIComponent = (function() {

    function UIComponent($el, props) {
      this.onClick = __bind(this.onClick, this);
      this.onUpdate = __bind(this.onUpdate, this);
      this.onDestroy = __bind(this.onDestroy, this);

      this.$el = $el;
      this.$el.on('click touchstart', this.onClick);
      this.$el.on('destroyed', this.onDestroy);

      this.props = $.extend({}, $el.data(), props);
      this.isMounting = true;

      // Set the initial state
      this.replaceState( this.getInitialState() || {} );
    }

    // Destroy a UI component
    UIComponent.prototype.onDestroy = function() {
      // Don't do anything if already not mounted
      if (!this.isMounted())
        return;

      this.componentWillUnmount();

      // Remove any event handlers
      var $el = this.$el;
      this.$el = null;
      $el.off('click touchstart', this.onClick);
      $el.on('destroyed', this.onDestroy);

      this.componentDidUnmount();
    }

    // Return a default state for this component
    UIComponent.prototype.getInitialState = function() { }

    // Extend/merge my state and possibly re-render
    UIComponent.prototype.setState = function(state) {
      if (!this.isUpdating) {
        // Allow things to settle - no need to call more than once per execution
        this.isUpdating = setTimeout( this.onUpdate, 1 );
      }

      // Merge this into our state
      for (var key in state) {
        if (__hasProp.call(state, key))
          this.state[key] = state[key];
      }
    }

    // Replace my state and possibly re-render
    UIComponent.prototype.replaceState = function(state) {
      if (!this.isUpdating) {
        // Allow things to settle - no need to call more than once per execution
        this.isUpdating = setTimeout( this.onUpdate, 1 );
      }

      this.state = state || {};
    }

    // My state has been changed, and we've let all other processes yield, so we know
    // there are no more changes coming.  Time to update the DOM.
    UIComponent.prototype.onUpdate = function(ev) {
      // Don't do anything if no longer mounted
      if (!this.isMounted())
        return;

      this.isMounting ? this.componentWillMount() : this.componentWillUpdate();

      this.render();
      delete this.isUpdating;

      this.$el.addClass('ui-rendered');

      this.isMounting ? this.componentDidMount() : this.componentDidUpdate();
      delete this.isMounting;
    }

    // Render into this element, given some state
    // There is no default rendering
    UIComponent.prototype.render = function() { }

    // Handle a click
    // There is no default click behavior
    UIComponent.prototype.onClick = function(ev) { }

    // Mount/unmount notifications
    UIComponent.prototype.componentWillMount = function() { }
    UIComponent.prototype.componentDidMount = function() { }
    UIComponent.prototype.componentWillUnmount = function() { }
    UIComponent.prototype.componentDidUnmount = function() { }
    UIComponent.prototype.componentWillUpdate = function() { }
    UIComponent.prototype.componentDidUpdate = function() { }
    UIComponent.prototype.isMounted = function() {
      return this.$el !== null;
    }

    return UIComponent;
  })();





  // class UIRouter: this is an incredibly simple router with our routes baked into it.
  // This will be completely replaced when we choose a router.
  var UIRouter = (function() {

    function UIRouter() { }

    UIRouter.prototype.route = function() {
      var re, parts, el,
        url = window.location.pathname;

      /* TODO: Need a way to wait until JSX is loaded.
      React.render(React.createElement(HelloBar), document.getElementsByClassName('header_middle')[0] );
      */

      /*
      window.headerBar = new HeaderBar( $('.header-wrapper') );
      */

      // Special handling for #blocklyApp, which could be on any route.
      el = $('#blocklyApp');
      if (el.length) {
        window.blocklyApp = new BlocklyApp( el );
      }

      el = $('#reference_area');
      if (el.length) {
        window.blocklyApp = new ReferenceArea( el );
      }

      // Right now, the static is a fixed route
      if (window.Frame.isStatic) {
        var params = Frame.queryParams();

        script_name = params.script;
        headerStore.load({
          script_name: params.script || '20-hour',
          stage_id: params.stage || 1,
          level_id: params.level || 1
        });

        return;
      }

      // s/:script_id/level/:level_id
      // (only applies to the default scripts ID < 8)
      re = /\/s\/(\d+)\/(level|puzzle)\/(\d+)$/i;
      parts = url.match(re);
      if (parts) {
        headerStore.load({
          script_id: parts[1],
          level_id: parts[3]
        });

        return;
      }

      // hoc|k8intro|editcode|2014|builder|flappy|jigsaw/:level
      re = /\/(\w+)\/(\d+)$/i;
      parts = url.match(re);
      if (parts) {
        var apps = {
          hoc: 'Hour of Code',
          k8intro: '20-hour',
          editcode: 'edit-code',
          '2014': 'events',
          flappy: 'flappy',
          jigsaw: 'jigsaw'
        };

        var app = apps[parts[1]];
        if (app) {
          headerStore.load({
            script_name: app,
            level_id: parts[2]
          });

          return;
        }
      }

      // s/:script_name/stage/:stage_id/level/:level_id
      re = /\/s\/(.+)\/stage\/(\d+)\/puzzle\/(\d+)$/i;
      parts = url.match(re);
      if (parts) {
        headerStore.load({
          script_name: parts[1],
          stage_id: parts[2],
          level_id: parts[3]
        });

        return;
      }

      // Unknown route
      return null;
    }


    return UIRouter;
  })();




  // class UIStore: this is a lightweight inheritable *ABSTRACT* class modeled after Flux
  // UIStore is "offline-aware", meaning that it will load assets in a different way when
  // it knows that there is no network connection.
  var UIStore = (function() {

    function UIStore() {
      this.save = __bind(this.save, this);

      this.value = null; // Empty store
      this.subscribers = [];
      this.offline = false;
    }

    // Get the value of this store
    UIStore.prototype.value = function() { return this.value; }

    // When this store changes, notify via callback(data)
    UIStore.prototype.subscribe = function(callback) {
      this.subscribers.push(callback);
      if (this.value)
        callback(this.value);
    }

    // Internal call to process any data that's being saved
    UIStore.prototype.process = function(data) { return data; }

    // Set the value of this store and notify the dependent
    UIStore.prototype.save = function(data) {
      this.value = this.process(data);

      // Note: Flux uses emitters...
      for (var i = 0; i < this.subscribers.length; i++)
        this.subscribers[i](this.value);
    }

    // Resolve a dynamic asset by combining the base asset filename + a serialized version of the args
    // MUST override this.  It's okay to use args and dataType to determine the URL.
    UIStore.prototype.resolveUrl = function(args, dataType) {
      throw new Error("This store has not specified its URL.");
    }

    // Resolve a static asset by combining the base asset filename + a serialized version of the args
    // MUST override this if you want to support offline access.
    // Example: return "/data/file_" + args.id;
    UIStore.prototype.resolveStatic = function(args) {
      throw new Error("This store does not support offline mode.");
    }

    // Resolve the AJAX parameters for a dynamic request
    // Okay to override this to, for instance, move some of the args into the URL, etc.
    UIStore.prototype.resolve = function(args, dataType) {
      return {
        url: this.resolveUrl(args, dataType),
        data: args
      };
    }

    // Load data into this store
    UIStore.prototype.$load = function(args, dataType, fnSave) {
      dataType = dataType || "json";

      // Set up the AJAX call to request the asset and then store the data, or raise an error.
      var ajax = this.resolve(args, dataType);
      ajax.dataType = dataType;
      ajax.success = fnSave || this.save;
      ajax.error = this.onAjaxError;

      return window.Frame.load(ajax, this.resolveStatic);
    }

    // Load JSON data into this store.
    UIStore.prototype.load = function(args) {
      return this.$load(args, "json");
    }

    // Helper: Load XML and return it as a JSON structure
    UIStore.prototype.loadXML = function(args) {
      return this.$load(args, "xml");
    }

    // Helper: Load HTML into this store, as a string
    UIStore.prototype.loadHTML = function(args) {
      return this.$load(args, "html");
    }

    return UIStore;
  })();



  // class UIFrame
  var UIFrame = (function() {

    var loaded_resources = {};

    // Create an AJAX transport for static script loading
    // This works for both file:// and http:// links
    // 1. File is loaded as a <SCRIPT> tag
    // 2. The file contains a call to RESOURCE({ ...json... });
    // 3. RESOURCE() stores the JSON away for later retrieval
    window.RESOURCE = function (json) {
      loaded_resources[Math.random(1)] = json;
    };
    $.ajaxTransport( "static", function( s ) {
      var script, callback, result;
      return {
        send: function( _, complete ) {

          // If needed, we could create a way to store or simulate postbacks.
          if (s.type != 'GET') {
            throw new Error(s.type + "s are not supported.")
          }

          if (s.isStaticResource) {
            s.dataTypes[ 0 ] = "json";
            s.url += "?jsonp=RESOURCE";
          } else {
            s.dataTypes[ 0 ] = "script";
          }

          script = jQuery("<script>", {
            charset: s.scriptCharset,
            src: s.url
          }).on(
            "load error",
            callback = function( evt ) {
              // If we remove this, we can't debug it.
              // script.remove();
              callback = null;

              if (s.isStaticResource) {
                // TODO: are there asynchronicity issues here?
                var json;
                for (var key in loaded_resources) {
                  json = loaded_resources[key];
                  delete loaded_resources[key];
                  break;
                }

                result = { json: json };
              }

              if ( evt ) {
                complete( evt.type === "error" ? 404 : 200, evt.type, result);
              }
            }
          );
          document.head.appendChild( script[ 0 ] );
        },
        abort: function() {
          if ( callback ) {
            callback();
          }
        }
      };
    });

    function UIFrame() {
    }

    UIFrame.prototype.init = function() {
      // Static environment ignores BASE HREF and looks for resources in the directory of this script.
      this.isStatic = this.detectStatic();
      if (this.isStatic) {
        this.rootUrl = this.baseUrl = document.URL.substr(0, document.URL.lastIndexOf('/'));

        // For now, initial scripts and CSS are still loaded from the server using a BASE HREF
        // pointing at the server.  Once the initial assets are loaded, everything else
        // is loaded from relative paths on the static site, so we remove it.
        // Once assets are bundled for static mode, we won't need to have the BASE HREF at all,
        // and we will remove all references to this.serverRoot.
        this.serverRoot = this.baseURI();
        this.serverRoot = this.serverRoot.substr(0, this.serverRoot.length-1); // Remove the trailing /
        $('base').remove();
      } else {
        this.baseUrl = this.baseURI();
        this.serverRoot = this.rootUrl = window.location.protocol + "//" + window.location.host;
      }

      // Hook into the global CSRF handler so that all requests are made with a valid token
      this.patchCSRF();

      this.router = new UIRouter();
      this.router.route();
    }

    // http://stackoverflow.com/a/21152762/7104
    // Decode query parameters
    UIFrame.prototype.queryParams = function (url) {
      url = url || location.search;
      var qd = {};

      url.substr(1).split("&").forEach(function(item) {
        var k = item.split("=")[0],
          v = decodeURIComponent(item.split("=")[1]); 
        (k in qd) ? qd[k].push(v) : qd[k] = [v,]
      });
      return qd;
    }

    // This is work in progress to patch the XmlHttpRequest service to prevent us from making
    // requests to a file:// URL (because that will fail and prevent other scripts from running.)
    // It also forces the CSRF token into all requests, although there are other ways to do
    // that once we get all the $.ajax() calls under control.
    UIFrame.prototype.patchCSRF = function() {
      var token = $('meta[name=csrf-token]').attr('content');

      var send = XMLHttpRequest.prototype.send;
      XMLHttpRequest.prototype.send = function(data) {
        if (this.skip)
          return;
        return send.apply(this, arguments);
      };

      var open = XMLHttpRequest.prototype.open;
      XMLHttpRequest.prototype.open = function(data) {
        var resp = open.apply(this, arguments);

        if (arguments[1].substr(0,5) == 'file:') {
          console.error('skipping ' + arguments[1]);
          this.skip = true;
        }

        // TODO: We're using JQuery from Rails, so it automatically adds this.
        // Is that really what we want to do?
        // this.setRequestHeader('X-CSRF-Token', token);

        return resp;
      };
    }

    // Create an absolute path to a resource.  The second parameter is temporary - only used in a static
    // site that still has references to a dynamic server.
    UIFrame.prototype.getAbsolutePath = function(path, rootUrl) {
      if (path[0] == '/')
        return (rootUrl || this.rootUrl) + path;
      return (rootUrl || this.baseUrl) + "/" + path;
    }

    UIFrame.prototype.baseURI = function() {
      // Check expected property.
      if (document.baseURI)
        return document.baseURI;
      var base = document.getElementsByTagName('base');
      if (base.length > 0)
        return base[0].href;
      return document.URL;
    }

    // Eventually we could support various modes of offline (disconnects, etc)
    UIFrame.prototype.detectStatic = function() {
      return window.location.protocol == "file:";
    }

    // Load the script at a given URL and return a promise that resolves when it has executed
    UIFrame.prototype.load = function(ajax, resolveStatic) {
      if (this.isStatic) {
        ajax.type = ajax.type || 'GET';

        // Static resolution replaces the URL with a static equivalent
        if (resolveStatic) {
          // All static resources are wrapped as .JS files
          var staticPath = resolveStatic(ajax.data) + ".js";

          // When we have a static asset pipeline, use the 2nd one instead.
          ajax.url = this.getAbsolutePath(staticPath, this.serverRoot);
          // ajax.url = this.getAbsolutePath(staticPath);

          delete ajax.data; // Static resources can't do anything with params
          ajax.cache = true;  // Static resources will have long cache times
          ajax.isStaticResource = true;  // Expect a JSONP resoponse
        } else {
          if (ajax.dataType != 'script')
            console.error("Request for " + ajax.url + " has no static handler.")
        }

        // All resources must be loaded via <SCRIPT> tag when offline.
        ajax.dataType = "static";
      } else if (ajax.dataType == "script") {
        // Use our static script loader instead of $.getScript, which deletes the <script>
        // element and makes it hard to debug into the script.
        ajax.dataType = "static";

      }

      return $.ajax(ajax);
    }

    // Write to an API - assumes a POST that returns JSON
    UIFrame.prototype.save = function(ajax) {
      ajax.method = ajax.method || "POST";
      ajax.dataType = ajax.dataType || "json";
      ajax.contentType = ajax.contentType || "application/x-www-form-urlencoded";

      return this.load(ajax);
    }

    // Load the script at a given URL and return a promise that resolves when it has executed
    UIFrame.prototype.loadSource = function(url) {
      return this.load({
        url: url,
        dataType: "script",
        cache: true
      });
    }

    // Loads the given app stylesheet.
    UIFrame.prototype.loadStyle = function(url) {
      $('<link>', {
        rel: 'stylesheet',
        type: 'text/css',
        href: url
      }).appendTo(document.head);
    }

    // Return a route to a link.  This interface will be improved when we use a real router.
    UIFrame.prototype.linkTo = function(route, forceOnline) {
      // Calculate route for script levels
      if (route.script) {
        if (this.isStatic && !forceOnline)
          return window.location.pathname + "?" + $.param( route, true );

        switch (route.script) {
          case '20-hour':
            return "/s/1/level/" + route.level;
          case 'Hour of Code':
            return "/hoc/" + route.level;
          case 'edit-code':
            return "/editcode/" + route.level;
          case 'events':
            return "/2014/" + route.level;
          case 'flappy':
            return "/flappy/" + route.level;
          case 'jigsaw':
            return "/jigsaw/" + route.level;
          case 'step':
            return "/s/step/puzzle/" + route.level;
          case 'hourofcode':  // TODO: For some reason, URLs for #21 generate URLs that resolve to #2. Why?
            return "/hoc/" + route.level;
          default:
            return "/s/" + route.script + "/stage/" + route.stage + "/puzzle/" + route.level;
        }
      }

      if (route.complete) {
        // For now, completion routes are always online.
        switch (route.complete) {
          case 'Hour of Code':
            return "http://code.org/api/hour/finish";
          default:
            // TODO
        }
      }

      // Not a recognized route
      return null;
    }

    UIFrame.prototype.goTo = function(route) {
      var url = this.linkTo(route);
      if (!url)
        return false;

      window.location.href = url;
      return true;
    }

    return UIFrame;
  })();


  // class ReferenceArea extends UIComponent
  var ReferenceArea = (function(_super) {
    __extends(ReferenceArea, _super);

    // Must have a constructor
    function ReferenceArea() {
      ReferenceArea.__super__.constructor.apply(this, arguments);

      return this;
    }

    ReferenceArea.prototype.render = function() {
      var el;

      var state = this.state || {};
      var level = state.level || {}

      this.$el.html('');  // Clear out the children
      this.$el.addClass('reference_area');

      // if (current_user.teacher? || current_user.admin?)
      if (level.solutionPath) {
        el = $('<div>').addClass('solution_link').appendTo(this.$el);

        $('<a>').attr('href', level.solutionPath).text('<%= I18n.t("reference_area.teacher") %>').appendTo(el);
      }

      if (level.relatedVideos) {
        $('<p>').addClass('help_title').text('<%= I18n.t("reference_area.title") %>').appendTo(this.$el);
        $('<p>').addClass('help_subtitle').text('<%= I18n.t("reference_area.subtitle") %>').appendTo(this.$el);

        for (var i = 0; i < level.relatedVideos.length; i++) {
          var video = level.relatedVideos[i];

          el = $('<a>', {
            data: video.data,  // Note this doesn't show as data- attributes, but does work.
            href: '#'
          }).addClass('video_link').appendTo(this.$el);
          var img = $('<img>', {
            id: 'thumbnail_' + video.youtube_code,
            src: video.thumbnail_url,
            width: 39*4.7
            // height: 50*4.7,
          }).addClass('video_thumbnail').appendTo(el);
          el.append( $('<div>').addClass('video_name').append( $('<span>').text(video.name) ) );

          if ((i % 2) == 1)
            $('<div>').addClass('clear').appendTo(this.$el);
        }

        $('<div>').addClass('clear').appendTo(this.$el);
      }
    }


    ReferenceArea.prototype.componentDidMount = function() {
      var _this = this;

      // When the headerStore gets data, update blockly
      window.headerStore.subscribe( function(data) {
        _this.setState({
          level: $.extend({}, data.level)
        });
      });

    }

    ReferenceArea.prototype.onClick = function(ev) {
      var el;

      // Click on a video
      el = $(ev.target).closest('.video_link');
      if (el.length) {
        ev.stopPropagation();

        showVideoDialog( $.extend({
          enable_fallback: true,
          autoplay: true
        }, el.data()) );

        return;
      }
    }


    return ReferenceArea;
  })(UIComponent);



  // class BlocklyApp extends UIComponent
  var BlocklyApp = (function(_super) {
    __extends(BlocklyApp, _super);

    // Must have a constructor
    function BlocklyApp() {
      BlocklyApp.__super__.constructor.apply(this, arguments);

      return this;
    }

    BlocklyApp.prototype.render = function() {
      var el;

      this.$el.html('');

      $('<div>').addClass('loading').appendTo(this.$el);

      el = $('<div>').addClass('slow_load').text('<%= I18n.t(:slow_loading) %>').appendTo(this.$el);

      $('<br>').appendTo(el);

      $('<a>', {
        href: 'javascript: location.reload();'
      }).text('<%= I18n.t(:try_reloading) %>').appendTo(el);
    }

    BlocklyApp.prototype.componentDidMount = function() {
      var _this = this;

      // Show the slow-loading warning if it takes more than 10 seconds to initialize
      var slow_load = _this.$el.find('.slow_load');
      setTimeout(function() {
        slow_load.show();
      }, 10000);

      // When the headerStore gets data, update blockly
      window.headerStore.subscribe( function(data) {

        data.level.level_id = data.level.level.id; // because level.id gets overwritten by the DIV id inside blockly somewhere

        // Set up the blockly options, starting from some default values
        var opts = $.extend({
          baseUrl: '/blockly/',
          containerId: _this.$el.attr('id'),
          script_name: data.stage.script_name,
          scriptPath: Frame.linkTo({
              script: data.stage.script_name,
              stage: data.stage.position,
              level: data.level.position
            }, true) // Normalize for a live URL because these are just tracking metrics
        }, data.level);

        // Blockly baseUrl must be an absolute path.
        opts.baseUrl = Frame.getAbsolutePath(opts.baseUrl);
        opts.level.stage_name = data.stage.name;

        // Kick-start the blockly scripts
        _this.loadAssets(opts)
        .then(function() {
          _this.startBlockly(opts);
        });

      });

    }

    BlocklyApp.prototype.loadSource = function(name) {
      var _this = this;

      return function () {
        return Frame.loadSource(_this.baseUrl + 'js/' + name + '.js');
      };
    }

    BlocklyApp.prototype.loadStyle = function(name) {
      return Frame.loadStyle(this.baseUrl + 'css/' + name + '.css');
    }

    // Load the assets required for a certain level
    BlocklyApp.prototype.loadAssets = function(opts) {
      this.baseUrl = opts.baseUrl;

      this.loadStyle('common');
      this.loadStyle(opts.app);

      var promise;
      if (opts.droplet) {
        this.loadStyle('droplet/droplet.min');
        promise = this.loadSource('jsinterpreter/acorn_interpreter')()
          .then(this.loadSource('requirejs/require'))
          .then(this.loadSource('ace/ace'))
          .then(this.loadSource('ace/ext-language_tools'))
          .then(this.loadSource('droplet/droplet-full.min'));
      } else {
        promise = this.loadSource('blockly')()
          .then(this.loadSource(opts.locale + '/blockly_locale'));
      }
      return promise.then(this.loadSource('common' + opts.pretty))
        .then(this.loadSource(opts.locale + '/common_locale'))
        .then(this.loadSource(opts.locale + '/' + opts.app + '_locale'))
        .then(this.loadSource(opts.app + opts.pretty));
    }

    // Sets up default options and initializes blockly
    BlocklyApp.prototype.startBlockly = function(opts) {
      if (!this.isMounted())
        return;

      // Turn string values into functions for keys that begin with 'fn_' (JSON can't contain function definitions)
      // E.g. { fn_example: 'function () { return; }' } becomes { example: function () { return; } }
      (function fixUpFunctions(node) {
        if (typeof node !== 'object') return;

        for (var i in node) {
          if (/^fn_/.test(i)) {
            try {
              node[i.replace(/^fn_/, '')] = eval('(' + node[i] + ')');
            } catch (e) { }
          } else {
            fixUpFunctions(node[i]);
          }
        }
      })(opts.level);

      // Add all the default options for blockly.
      // Note that "this" in functions below is the blockly object, not this component.
      $.extend(opts, {
        Dialog: Dialog,
        cdoSounds: CDOSounds,
        position: { blockYCoordinateInterval: 25 },

        onInitialize: function() {
          // When called, "this" is bound to the options hash itself

          // TODO: Confirm that moving this to onInitialize is ok - no timing effects?
          window.startTiming('Puzzle', this.scriptPath, '');

          // Hide callouts when the function editor is closed (otherwise they jump to the top left corner)
          $(window).on('function_editor_closed', function() {
            $('.cdo-qtips').qtip('hide');
          });

          this.createCallouts();
          if (window.wrapExistingClipPaths && window.handleClipPathChanges) {
            wrapExistingClipPaths();
            handleClipPathChanges();
          }

          $(document).trigger('appInitialized', this);
        },

        createCallouts: function() {
          $.fn.qtip.zindex = 500;
          this.callouts && this.callouts.every(function(callout) {
            var selector = callout.element_id; // jquery selector.
            if ($(selector).length === 0 && !callout.on) {
              return true;
            }

            var defaultConfig = {
              content: {
                text: callout.localized_text,
                title: {
                  button: $('<div class="tooltip-x-close"/>')
                }
              },
              style: {
                classes: "",
                tip: {
                  width: 20,
                  height: 20
                }
              },
              position: {
                my: "bottom left",
                at: "top right"
              },
              hide: {
                event: 'click mousedown touchstart'
              },
              show: false // don't show on mouseover
            };

            var customConfig = $.parseJSON(callout.qtip_config);
            var config = $.extend(true, {}, defaultConfig, customConfig);
            config.style.classes = config.style.classes.concat(" cdo-qtips");

            function reverseDirection(token) {
              if (/left/i.test(token)) {
                token = 'right';
              } else if (/right/i.test(token)) {
                token = 'left';
              }
              return token;
            }

            function reverseCallout(position) {
              position = position.split(/\s+/);
              var a = position[0];
              var b = position[1];
              return reverseDirection(a) + reverseDirection(b);
            }

            // Reverse callouts in RTL mode
            if (Blockly.RTL) {
              config.position.my = reverseCallout(config.position.my);
              config.position.at = reverseCallout(config.position.at);
              if (config.position.adjust) {
                config.position.adjust.x *= -1;
              }
            }

            if (callout.on) {
              window.addEventListener(callout.on, function() {
                if (!callout.seen && $(selector).length > 0) {
                  callout.seen = true;
                  $(selector).qtip(config).qtip('show');
                }
              });
            } else {
              $(selector).qtip(config).qtip('show');
            }

            return true;
          });
        },

        onAttempt: function(report) {
          var scriptPath = this.scriptPath;
          var _this = this;

          // Track puzzle attempt event
          trackEvent('Puzzle', 'Attempt', scriptPath, report.pass ? 1 : 0);
          if (report.pass) {
            trackEvent('Puzzle', 'Success', scriptPath, report.attempt);
            window.stopTiming('Puzzle', scriptPath, '');
          }
          trackEvent('Activity', 'Lines of Code', scriptPath, report.lines);

          // ==============
          // TODO: Removing lastServerResponse -- and therefore nextRedirect, previousLevelRedirect, and videoInfo has broken
          // all other level types besides Blockly.
          // They'll need to be updated to the new method of querying the level info (which is a good idea anyway since they are just
          // extra copies of the same code.)
          // ==============

          var onMilestone = function(response) {
            _this.report = null;

            // This used to be passed back from the milestone API.  It's used in a place that might not have easy access to
            // scriptPath, so we pack it in until we can remove that location.
            response.levelPath = scriptPath;

            if (report.onComplete)
              report.onComplete(response);
          }

          var data = $.extend({}, report);
          delete data.onComplete;

          // Make a POST request to the milestone API
          if (this.report)
            this.report.abort();
          this.report = Frame.save({
            url: this.milestone,
            data: data,
            success: onMilestone,
            error: function (xhr, textStatus, thrownError) {
              // Ignore an aborted API call
              if (textStatus == "abort")
                return;

              // It's okay if milestone fails. Catch the error and pretend it succeeded with minimal info.
              onMilestone({
                'error': xhr.responseText,
                message: report.pass ? 'good job' : 'try again',
                design: 'white_background'
              });
            }
          });
        },
        onResetPressed: function() {
          if (this.report) {
            this.report.abort();
            this.report = null;
          }
        },
        onContinue: function() {
          var route;

          // Is this level the script completion?
          if (opts.level.next === false) {
            route = {
              complete: opts.script_name
            };
          } else {
            // Calculate the next level and route to it.
            var next = opts.level.next || [ opts.level.stage, opts.level.position + 1];
            route = {
              script: opts.script_name,
              stage: next[0],
              level: next[1]
            };
          }

          // If this level has a wrap-up video, show it before moving on.
          if (opts.level.wrapupVideo) {
            opts.level.wrapupVideo.redirect = Frame.linkTo(route);  // someday, can just pass in a route.
            showVideoDialog(opts.level.wrapupVideo);
          } else {
            if (!Frame.goTo(route)) {
              // What kind of message should the user get?
            }
          }
        },
        backToPreviousLevel: function() {
          if (opts.level.previous === false) {
            // Does this mean anything or do we just fail silently?
            return;
          }

          // Calculate the previous level and route to it.
          var prev = opts.level.previous || [ opts.level.stage, opts.level.position - 1];
          var route = {
            script: opts.script_name,
            stage: prev[0],
            level: prev[1]
          };
          if (!Frame.goTo(route)) {
            // What kind of message should the user get?
          }
        },
        showInstructionsWrapper: function(showInstructions) {
          var hasInstructions = this.level.instructions || this.level.aniGifURL;
          if (!hasInstructions || this.share || this.level.skipInstructionsPopup) {
            return;
          }

          if (this.autoplayVideo) {
            showVideoDialog(this.autoplayVideo);
            $('.video-modal').on('hidden.bs.modal', function () {
              showInstructions();
            });
          } else {
            showInstructions();
          }
        }
      });

      // TODO: need a better way to bind this.
      // Summary of the problem: onAttempt (and others) used global variables to get at the option
      // state like .scriptPath, as well as global functions like sendReport()
      // Ideally these would be available as local methods, but the current appMain & StudioApp code
      // does not offer any way to get at options.scriptPath when calling .onAttempt.
      // We could bind functions in onInitialize, but that's called *after* the functions have already
      // been copied out into the StudioApp.
      // The bigger question is: what *should* "this" be when calling parameters in the config block?
      opts.onAttempt = __bind(opts.onAttempt, opts);
      opts.onContinue = __bind(opts.onContinue, opts);
      opts.backToPreviousLevel = __bind(opts.backToPreviousLevel, opts);
      opts.onResetPressed = __bind(opts.onResetPressed, opts);

      window[opts.app + 'Main'](opts);
    }

    return BlocklyApp;
  })(UIComponent);


  // Exports:
  window.UIStore = UIStore;
  window.UIComponent = UIComponent;
  window.UIRouter = UIRouter;
  window.UIFrame = UIFrame;
  window.BlocklyApp = BlocklyApp;

}).call(this);
