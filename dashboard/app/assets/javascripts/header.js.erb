/**
 * Dynamic header generation and event bindings for header actions.
 */

// TODO: Enable the 'destroyed' method?   No need if we're just going to switch to React later.
// (function($){ $.event.special.destroyed = { remove: function(o) { if (o.handler) { o.handler() } } } })(jQuery);


// New private scope -- a lot of this is boilerplate for class structures, taken from coffeescript
(function() {
  var
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };


  // class HeaderStore extends UIStore
      /**
     * @param data {{
     *   title: string,
     *   finishLink: string,
     *   showStageLinks: boolean,
     *   trophies: Object,
     *   levels: Array.<{
     *     displayText: string,
     *     status: string,
     *     unplugged: boolean,
     *     assessment: boolean
     *   }>
     * }}
     */
  HeaderStore = (function(_super) {
    __extends(HeaderStore, _super);

    // Must have a constructor
    function HeaderStore() {
      return HeaderStore.__super__.constructor.apply(this, arguments);
    }

    HeaderStore.prototype.resolveUrl = function(args, dataType) {
      return "/popup/progress";
    }

    HeaderStore.prototype.resolveFilename = function(args, dataType) {
      return "/progress_" + args.script_name + "_" + args.stage_id + "_" + args.level_id + "." + dataType;
    }

    return HeaderStore;
  })(UIStore);



  // ScriptStore: load the script progress (used in the header dropdown)
  ScriptStore = (function(_super) {
    __extends(ScriptStore, _super);

    // Must have a constructor
    function ScriptStore() {
      return ScriptStore.__super__.constructor.apply(this, arguments);
    }

    ScriptStore.prototype.resolveUrl = function(args, dataType) {
      return "/popup/stats";
    }

    ScriptStore.prototype.resolveFilename = function(args, dataType) {
      return "/script_" + args.script_id + "." + dataType;
    }

    return ScriptStore;
  })(UIStore);



  // class HeaderProgress extends UIComponent
  HeaderProgress = (function(_super) {
    __extends(HeaderProgress, _super);

    // Must have a constructor
    function HeaderProgress($el, props) {
      HeaderProgress.__super__.constructor.apply(this, arguments);

      this.onModalClick = __bind(this.onModalClick, this);

      return this;
    }

    HeaderProgress.prototype.componentDidMount = function() {
      var _this = this;

      // TODO: Is this the right place to put this?
      // It guarantees there will be at least one render cycle before we try to load the header.
      this.props.headerStore.notify( __bind(this.replaceState, this) );

      // This store is used to load the HTML overview of the entire script
      // TODO: Combine this with the headerStore
      this.scriptStore = new ScriptStore();
      this.scriptStore.notify(function(html) {
        _this.setState({
          stageHtml: html
        });
      });

      // Create tooltips for the free-play icons
      // TODO: Might be better to initialize this component elsewhere
      $('.level_free_play').qtip({
        content: {
          attr: 'title'
        },
        position: {
          my: 'top center',
          at: 'bottom center'
        }
      });
    }


    HeaderProgress.prototype.render = function() {
      var cl, el;
      var _this = this;
      var state = this.state || {};

      var script = state.script || {};
      var stage = state.stage || {};
      var progress = state.progress || {};

      // Don't render unless we are initialized with a script
      if (!script)
        return;

      // NOTE: All this DOM manipulation would be better done via a template - but we're in the process
      // of picking a template language vs JSX

      var $middle = _this.$el.find('.header_middle');
      $middle.children().remove();
      el = $('<div>').addClass('header_level').appendTo($middle);
      var $container = $('<div>').addClass('header_level_container').appendTo(el);

      // Title
      if (stage.title) {
        $('<div>').addClass('header_text header_level_text').text(stage.title).appendTo($container);
      }

      // Progress: Render the array of levels
      var levels = stage.levels || [];
      var level_id = parseInt(this.props.level_id, 10);

      if (levels.length) {
        var els = $.map(levels, function(level, index) {
          var status = progress.status || {};

          cl = 'level_link ' + (status[level.id] || 'not_tried');
          if (level.unplugged)
            cl += ' unplugged_level';
          var link = $('<a>').addClass(cl).attr('href', level.link).text(level.label);

          cl = level.assessment ? 'puzzle_outer_assessment' : 'puzzle_outer_level';
          if (index === level_id - 1)
            cl += ' puzzle_outer_current';
          if (index === levels.length - 1)
            cl += ' last';
          return $('<div>').addClass(cl).append(link);
        });

        $('<div>').addClass('progress_container').append(els).appendTo($container);
      }

      // Finished link
      if (stage.finishLink) {
        el = $('<div>').addClass('header_finished_link');
        $('<a>').attr('href', state.finishLink.href).text(state.finishLink.text).appendTo(el);
        el.appendTo($container);
      }

      // Trophies
      if (progress.trophies) {
        el = $('<span>').addClass('header_trophy_link');
        $('<div>').addClass('header_text').text('<%= I18n.t(:trophies) %>').appendTo(el);
        $('<div>').addClass('header_status_bar current_trophies').text(progress.trophies.current).appendTo(el);
        $('<div>').addClass('header_text max_trophies').text(progress.trophies.of + ' ' + progress.trophies.max).appendTo(el);
        el.appendTo($container);
      }

      // Show stage popup if there is more than one stage, or trophies
      if (script.stages > 1 || script.trophies) {
        el = $('<span>').addClass('header_popup_link');

        if (state.popped) {
          $('<div>').addClass('header_popup_link_glyph').html("&#x25B2;").appendTo(el);
          $('<div>').addClass('header_popup_link_text').text('<%= I18n.t(:less) %>').appendTo(el);
        } else {
          $('<div>').addClass('header_popup_link_glyph').html("&#x25BC;").appendTo(el);
          $('<div>').addClass('header_popup_link_text').text('<%= I18n.t(:more) %>').appendTo(el);
        }
        el.appendTo($container);

        $('.freeplay_links').show();
      } else {
        $('.freeplay_links').hide();
      }

      // Popup stage navigation
      if (state.popped) {
        var header_popup = $('<div>').addClass('header_popup').appendTo($middle);

        el = $('<div>').addClass('header_popup_header').appendTo(header_popup);
        $('<span>').text('<%= I18n.t("nav.popup.progress") %>').appendTo(el);
        if (progress.linesOfCodeText)
          $('<div>').addClass('header_text').css('float','right').text(progress.linesOfCodeText).appendTo(el);

        el = $('<div>').addClass('header_popup_body').appendTo(header_popup);
        el.html(state.stageHtml || '<div class="loading"></div>');

        el = $('<div>').addClass('header_popup_footer').appendTo(header_popup);
        $('<div>').addClass('header_popup_close').text('<%= I18n.t("nav.popup.close") %>').appendTo(el);

        // Catch clicks anywhere else and close the popup
        $(document).on('click', this.onModalClick);
      } else {
        $(document).off('click', this.onModalClick);
      }
    }

    HeaderProgress.prototype.componentDidUpdate = function() {
      // This is totally cheating by React rules.  But it's intentional: we don't want to force another
      // update so we just edit the state directly.  (React would notice that the change had no DOM effect,
      // but we don't have that optimization.)
      if (this.state.stageHtml && this.state.jumpToTrophies) {
        var off = $('#trophies').offset();
        if (off)
          window.scrollTo(0, +off.top);
        delete this.state.jumpToTrophies;
      }
    }

    // Three possible arguments: true, false, or "trophies" (the last one autoscrolls the page to the bottom of the popup)
    HeaderProgress.prototype.showPopup = function(show) {
      this.setState({
        popped: !!show,
        jumpToTrophies: show == 'trophies'
      });

      // Have we loaded the stage HTML already?  If not, load it now.
      if (this.state.popped && (this.state.stageHtml === undefined)) {
        this.state.stageHtml = false; // prevent multiple loads

        // Ask the script store to load a particular script.
        this.scriptStore.loadHTML({
          script_id: this.script.id
        });

      }
    }

    HeaderProgress.prototype.onClick = function(ev) {
      var el;

      // Toggle more/less button
      el = $(ev.target).closest('.header_trophy_link');
      if (el.length) {
        ev.stopPropagation(); // Otherwise it will count as a click outside the modal.
        this.showPopup("trophies");
        return;
      }

      // Toggle more/less button
      el = $(ev.target).closest('.header_popup_link');
      if (el.length) {
        ev.stopPropagation();
        this.showPopup(!this.state.popped);
        return;
      }

      // Close button
      el = $(ev.target).closest('.header_popup_close');
      if (el.length) {
        this.showPopup(false);
        return;
      }
    }

    HeaderProgress.prototype.onModalClick = function(ev) {
      var el;

      // Clicks outside the popup close it
      el = $(ev.target).closest('.header_popup');
      if (!el.length) {
        this.showPopup(false);
        return;
      }
    }

    return HeaderProgress;
  })(UIComponent);


  // For now, create a global.  Later, this should be in module.exports
  // (Note these are already global since they're not declared via 'var'.
  window.HeaderProgress = HeaderProgress;
  window.HeaderStore = HeaderStore;

}).call(this);
